import React, { Component } from 'react'
// import { Text, View } from 'react-native'
import {AppState, Text, View, Picker} from 'react-native';
import PushNotification from 'react-native-push-notification';
import PushController from './PushController';
export default class App extends Component {
  state = {
    appState: AppState.currentState,
    pick:5
  };

  componentDidMount() {
    AppState.addEventListener('change', this._handleAppStateChange);
  }

  componentWillUnmount() {
    AppState.removeEventListener('change', this._handleAppStateChange);
  }
  _handleAppStateChange = (nextAppState) => {
    if (nextAppState === 'background') {
      let date = new Date(Date.now() );

      // if (Platform.OS === 'ios') {
      //   date = date.toISOString();
      // }

      PushNotification.localNotificationSchedule({
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: "high", // (optional) set notification priority, default: high
        visibility: "private", // (optional) set notification visibility, default: private
        importance: "high", 
        message: "My Notification Message",
        date,
      });
    }
  };
  render() {
    return (
      <View style={{
        justifyContent:'center',
        alignItems:'center',
        flex:1
      }}>
      <Picker
      selectedValue={this.state.pick}
      style={{height: 50, width: 100}}
      onValueChange={(itemValue, itemIndex) =>
        this.setState({pick: itemValue})
      }>
      <Picker.Item label="5" value="5" />
      <Picker.Item label="3" value="3" />
      <Picker.Item label="8" value="8" />
    </Picker>
    
    <PushController />
      </View>
    )
  }
}
